[build-system]
requires = ["setuptools>=64.0.1", "setuptools-scm[toml]>=6.2"]

[project]
name = "xpsdeeplearning"
dynamic = ["version"]
authors = [
    {name = "Lukas Pielsticker", email = "lukas.pielsticker@cec.mpg.de"},
    {name = "Rachel L. Nicholls"},
    {name = "Serena DeBeer"},
    {name = "Mark Greiner"},
]

description = "A toolbox for XPS data analysis using Convolutional Neural Networks."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9,!=3.12"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.1.0",
    "h5py>=3.10.0",
    "matplotlib>=3.8.0",
    "nbconvert>=7.14.2",
    "jupyter==1.0.0",
    "numpy>=1.25",
    "pandas>=2.2.0",
    "pillow>=10.2.0",
    "pydot>=2.0.0",
    "pydotplus>=2.0.2",
    "pytz>=2024.1",
    "python-docx>=1.1.0",
    "seaborn>=0.13",
    "scipy>=1.12",
    "scikit-learn>=1.4",
    "talos @ git+https://github.com/lukaspie/talos.git@v1.3.2#egg=talos",
    "tensorflow>=2.8.0",
    "tensorflow_probability>=0.23",
    "xlsxwriter>=3.1.9",
]

[project.urls]
"Homepage" = "https://github.com/surfaceanalytics/xpsdeeplearning"
"Bug Tracker" = "https://github.com/surfaceanalytics/xpsdeeplearning/issues"

[project.optional-dependencies]
dev = [
    "mypy",
    "nbdime",
    "ruff",
    "pytest",
    "pytest-timeout",
    "pytest-cov",
    "types-pytz",
    "types-requests",
    "pip-tools",
    "pre-commit",
]

[project.scripts]
simulate = "xpsdeeplearning.simulation.run:simulate_cli"
train = "xpsdeeplearning.network.cli:train_cli"
predict = "xpsdeeplearning.network.cli:predict_cli"

[tool.setuptools]
packages = ["xpsdeeplearning"]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"

[tool.ruff]
include = ["xpsdeeplearning/*.py", "xpsdeeplearning/notebooks/*.ipynb", "tests/*.py"]
lint.select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "PL", # pylint
]
lint.ignore = [
    "E501", # Line too long ({width} > {limit} characters)
    "E701", # Multiple statements on one line (colon)
    "E731", # Do not assign a lambda expression, use a def
    "E402",  # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used instead of constant
    "PLW0603", # Using the global statement
    "PLW2901", # redefined-loop-name
    "PLR1714", # consider-using-in
    "PLR5501", # else-if-used
]
lint.fixable = ["ALL"]

[tool.mypy]
strict = false
ignore_missing_imports = true
follow_imports = "silent"
no_strict_optional = true
disable_error_code = "import, annotation-unchecked"
